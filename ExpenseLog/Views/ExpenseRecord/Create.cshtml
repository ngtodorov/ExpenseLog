@model ExpenseLog.Models.ExpenseRecord

@{
    ViewBag.Title = "Create";
}

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", id = "formExpenseRecord" }))
{
    @Html.AntiForgeryToken()
    @Html.Hidden("attachmentsJson", "")
    @Html.Hidden("userID", (object)ViewBag.UserID)
    @Html.Hidden("attachmentUploadWebAPIUrl", (object)ViewBag.AttachmentUploadWebAPIUrl)

    @Html.Hidden("FilterExpenseTypeID", (object)ViewBag.FilterExpenseTypeID)
    @Html.Hidden("FilterExpenseEntityID", (object)ViewBag.FilterExpenseEntityID)
    @Html.Hidden("FilterDateFrom", (object)ViewBag.FilterDateFrom)
    @Html.Hidden("FilterDateTo", (object)ViewBag.FilterDateTo)
    @Html.Hidden("FilterDescriptionSearch", (object)ViewBag.FilterDescriptionSearch)

    <div class="form-horizontal">
        <h4>Create Expense Record</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ExpenseTypeID, "Type", htmlAttributes: new { @class = "control-label col-md-2", @style = "color:blue" })
            <div class="col-md-4">
                @Html.DropDownList("expenseTypeID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ExpenseTypeID, "", new { @class = "text-danger" })
                @Html.ValidationMessageFor(model => model.ExpenseType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExpenseEntityID, "Entity", htmlAttributes: new { @class = "control-label col-md-2", @style = "color:blue" })
            <div class="col-md-4">
                @Html.DropDownList("expenseEntityID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ExpenseEntityID, "", new { @class = "text-danger" })
                @Html.ValidationMessageFor(model => model.ExpenseEntity, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExpenseDate, htmlAttributes: new { @class = "control-label col-md-2", @style = "color:blue" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.ExpenseDate, new { htmlAttributes = new { @class = "form-control", @data_provide = "datepicker" } })
                @Html.ValidationMessageFor(model => model.ExpenseDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExpensePrice, htmlAttributes: new { @class = "control-label col-md-2", @style = "color:blue" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.ExpensePrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ExpensePrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ExpenseDescription, htmlAttributes: new { @class = "control-label col-md-2", @style = "color:blue" })
            <div class="col-md-4">
                @Html.TextAreaFor(model => model.ExpenseDescription, 5, 45, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ExpenseDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />

        <div class="form-row">
            <div class="col input-group-sm">
                <div class="col-md-offset-2 col-md-10">
                    <!-- Submit Button -->
                    <input type="submit" id="buttonSubmit" value="Create" class="btn btn-outline-primary btn-sm" />
                    <!-- Cancel Button -->
                    @Html.ActionLink("Cancel", "Index", "ExpenseRecord", null, new { @class = "btn btn-outline-primary btn-sm", @id = "buttonCancel" })
                    <!-- Select Files and Upload: Displays a 'Select Files' button that uses a File Upload control to select files to be uploaded and calls the JS function: DisplayFilesToUpload() that lists the file name and size for all files to be uploaded.                   -->
                    <input type="file" id="file" name="selectFiles" class="btn btn-outline-primary btn-sm" onchange="DisplayFilesToUpload()" multiple accept=".png,.jpg,.jpeg,.gif,.tif,.tiff,.bmp" />
                </div>
            </div>
        </div>
        <p id="FilesLabel"></p>
    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/custom/customscripts.js")


    <script>

        //Lists the file name and size for all files to be uploaded by updating the <p id="FilesToUpload"></p> control
        function DisplayFilesToUpload() {
            var element = document.getElementById("file");
            var html = "";

            if (element.files != null && element.files.length > 0) {
                html = "<div style='color:blue'>Files To Upload:</div>";

                for (var i = 0; i < element.files.length; i++) {

                    var file = element.files[i];
                    if ('name' in file) { html += file.name + " ("; }
                    if ('size' in file) { html += "size: " + Math.round(file.size / 1024) + " kB)<br>"; }
                }
                html = html + "<hr />";
            }
            document.getElementById("FilesLabel").innerHTML = html;
        }

    </script>

}
